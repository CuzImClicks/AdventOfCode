[
    {
        "label": "md5",
        "importPath": "hashlib",
        "description": "hashlib",
        "isExtraImport": true,
        "detail": "hashlib",
        "documentation": {}
    },
    {
        "label": "math",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "math",
        "description": "math",
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "items",
        "kind": 5,
        "importPath": "2015.day1",
        "description": "2015.day1",
        "peekOfCode": "items = open(\"D:/GitHub Repos/AdventOfCode/inputs/2015/day1.txt\", \"r\").read()\nword = []\nfloor = 0\nfor item in [char for char in items]:\n    if floor == -1:\n        break\n    word.append(item)\n    if item == \"(\":\n        floor += 1\n    if item == \")\":",
        "detail": "2015.day1",
        "documentation": {}
    },
    {
        "label": "word",
        "kind": 5,
        "importPath": "2015.day1",
        "description": "2015.day1",
        "peekOfCode": "word = []\nfloor = 0\nfor item in [char for char in items]:\n    if floor == -1:\n        break\n    word.append(item)\n    if item == \"(\":\n        floor += 1\n    if item == \")\":\n        floor -= 1",
        "detail": "2015.day1",
        "documentation": {}
    },
    {
        "label": "floor",
        "kind": 5,
        "importPath": "2015.day1",
        "description": "2015.day1",
        "peekOfCode": "floor = 0\nfor item in [char for char in items]:\n    if floor == -1:\n        break\n    word.append(item)\n    if item == \"(\":\n        floor += 1\n    if item == \")\":\n        floor -= 1\nprint(len(word))",
        "detail": "2015.day1",
        "documentation": {}
    },
    {
        "label": "items",
        "kind": 5,
        "importPath": "2015.day2",
        "description": "2015.day2",
        "peekOfCode": "items = open(\"D:/GitHub Repos/AdventOfCode/inputs/2015/day2.txt\", \"r\").read().splitlines()\ntotal = 0\nfor item in items:\n    w, h, l = item.split(\"x\")\n    w, h, l = int(w), int(h), int(l)\n    wrap = 2*min(w+h, w+l, l+h)\n    bow = w * h * l\n    total += wrap + bow\nprint(total)",
        "detail": "2015.day2",
        "documentation": {}
    },
    {
        "label": "total",
        "kind": 5,
        "importPath": "2015.day2",
        "description": "2015.day2",
        "peekOfCode": "total = 0\nfor item in items:\n    w, h, l = item.split(\"x\")\n    w, h, l = int(w), int(h), int(l)\n    wrap = 2*min(w+h, w+l, l+h)\n    bow = w * h * l\n    total += wrap + bow\nprint(total)",
        "detail": "2015.day2",
        "documentation": {}
    },
    {
        "label": "count",
        "kind": 5,
        "importPath": "2015.day3",
        "description": "2015.day3",
        "peekOfCode": "count = 0\nitems = open(\"D:/GitHub Repos/AdventOfCode/inputs/2015/day3.txt\", \"r\").read()\nitems = [char for char in items]\ncoords = {}\nglobal coord\ncoord = {\"x\": 0, \"y\": 0}\nfor item in items:\n    count += 1\n    print(\"\\rMoves: \" + str(count), end=\"\")\n    if item == \"^\":",
        "detail": "2015.day3",
        "documentation": {}
    },
    {
        "label": "items",
        "kind": 5,
        "importPath": "2015.day3",
        "description": "2015.day3",
        "peekOfCode": "items = open(\"D:/GitHub Repos/AdventOfCode/inputs/2015/day3.txt\", \"r\").read()\nitems = [char for char in items]\ncoords = {}\nglobal coord\ncoord = {\"x\": 0, \"y\": 0}\nfor item in items:\n    count += 1\n    print(\"\\rMoves: \" + str(count), end=\"\")\n    if item == \"^\":\n        coord[\"y\"] += 1",
        "detail": "2015.day3",
        "documentation": {}
    },
    {
        "label": "items",
        "kind": 5,
        "importPath": "2015.day3",
        "description": "2015.day3",
        "peekOfCode": "items = [char for char in items]\ncoords = {}\nglobal coord\ncoord = {\"x\": 0, \"y\": 0}\nfor item in items:\n    count += 1\n    print(\"\\rMoves: \" + str(count), end=\"\")\n    if item == \"^\":\n        coord[\"y\"] += 1\n    elif item == \">\":",
        "detail": "2015.day3",
        "documentation": {}
    },
    {
        "label": "coords",
        "kind": 5,
        "importPath": "2015.day3",
        "description": "2015.day3",
        "peekOfCode": "coords = {}\nglobal coord\ncoord = {\"x\": 0, \"y\": 0}\nfor item in items:\n    count += 1\n    print(\"\\rMoves: \" + str(count), end=\"\")\n    if item == \"^\":\n        coord[\"y\"] += 1\n    elif item == \">\":\n        coord[\"x\"] += 1",
        "detail": "2015.day3",
        "documentation": {}
    },
    {
        "label": "coord",
        "kind": 5,
        "importPath": "2015.day3",
        "description": "2015.day3",
        "peekOfCode": "coord = {\"x\": 0, \"y\": 0}\nfor item in items:\n    count += 1\n    print(\"\\rMoves: \" + str(count), end=\"\")\n    if item == \"^\":\n        coord[\"y\"] += 1\n    elif item == \">\":\n        coord[\"x\"] += 1\n    elif item == \"v\":\n        coord[\"y\"] -= 1",
        "detail": "2015.day3",
        "documentation": {}
    },
    {
        "label": "m",
        "kind": 5,
        "importPath": "2015.day4",
        "description": "2015.day4",
        "peekOfCode": "m = md5()\nx = 0\nwhile True:\n    msg = f\"ckczppom{x}\"\n    hash = md5(msg.encode()).hexdigest()\n    print(f\"{x} {msg} - {hash}\")\n    if hash.startswith(\"000000\"):\n        print(\"\\n\\n\")\n        break\n    x += 1",
        "detail": "2015.day4",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "2015.day4",
        "description": "2015.day4",
        "peekOfCode": "x = 0\nwhile True:\n    msg = f\"ckczppom{x}\"\n    hash = md5(msg.encode()).hexdigest()\n    print(f\"{x} {msg} - {hash}\")\n    if hash.startswith(\"000000\"):\n        print(\"\\n\\n\")\n        break\n    x += 1",
        "detail": "2015.day4",
        "documentation": {}
    },
    {
        "label": "is_nice",
        "kind": 2,
        "importPath": "2015.day5",
        "description": "2015.day5",
        "peekOfCode": "def is_nice(s):\n    vowels = 0\n    for c in s:\n        if c in 'aeiou':\n            vowels += 1\n        if vowels >= 3:\n            break\n    if vowels < 3:\n        return False\n    repeat = False",
        "detail": "2015.day5",
        "documentation": {}
    },
    {
        "label": "is_really_nice",
        "kind": 2,
        "importPath": "2015.day5",
        "description": "2015.day5",
        "peekOfCode": "def is_really_nice(s):\n    first = False\n    for i in range(len(s) - 3):\n        sub = s[i: i + 2]\n        if sub in s[i + 2:]:\n            first = True\n            print(\"{} is really nice and repeats with {}\".format(s, sub))\n            break\n    if not first:\n        return False",
        "detail": "2015.day5",
        "documentation": {}
    },
    {
        "label": "input_string",
        "kind": 5,
        "importPath": "2015.day5",
        "description": "2015.day5",
        "peekOfCode": "input_string = open(\"D:/GitHub Repos/AdventOfCode/inputs/2015/day5.txt\", \"r\").read()\ndef is_nice(s):\n    vowels = 0\n    for c in s:\n        if c in 'aeiou':\n            vowels += 1\n        if vowels >= 3:\n            break\n    if vowels < 3:\n        return False",
        "detail": "2015.day5",
        "documentation": {}
    },
    {
        "label": "count1",
        "kind": 5,
        "importPath": "2015.day5",
        "description": "2015.day5",
        "peekOfCode": "count1 = 0\ncount2 = 0\nfor s in input_string.split('\\n'):\n    if is_nice(s):\n        count1 += 1\n    if is_really_nice(s):\n        count2 += 1\nprint(count1)\nprint(count2)",
        "detail": "2015.day5",
        "documentation": {}
    },
    {
        "label": "count2",
        "kind": 5,
        "importPath": "2015.day5",
        "description": "2015.day5",
        "peekOfCode": "count2 = 0\nfor s in input_string.split('\\n'):\n    if is_nice(s):\n        count1 += 1\n    if is_really_nice(s):\n        count2 += 1\nprint(count1)\nprint(count2)",
        "detail": "2015.day5",
        "documentation": {}
    },
    {
        "label": "OFF",
        "kind": 5,
        "importPath": "2015.day6",
        "description": "2015.day6",
        "peekOfCode": "OFF = 0\nON = 1\nTOGGLE = 2\nprocessed = []\nwith open(\"D:/GitHub Repos/AdventOfCode/inputs/2015/day6.txt\", \"r\") as file:\n    for line in file.readlines():\n        line = line.strip()\n        line = line.replace(' through ', '), (')+')'\n        line = line.replace('turn on ', str(ON)+', (')\n        line = line.replace('turn off ', str(OFF)+', (')",
        "detail": "2015.day6",
        "documentation": {}
    },
    {
        "label": "ON",
        "kind": 5,
        "importPath": "2015.day6",
        "description": "2015.day6",
        "peekOfCode": "ON = 1\nTOGGLE = 2\nprocessed = []\nwith open(\"D:/GitHub Repos/AdventOfCode/inputs/2015/day6.txt\", \"r\") as file:\n    for line in file.readlines():\n        line = line.strip()\n        line = line.replace(' through ', '), (')+')'\n        line = line.replace('turn on ', str(ON)+', (')\n        line = line.replace('turn off ', str(OFF)+', (')\n        line = line.replace('toggle ', str(TOGGLE)+', (')",
        "detail": "2015.day6",
        "documentation": {}
    },
    {
        "label": "TOGGLE",
        "kind": 5,
        "importPath": "2015.day6",
        "description": "2015.day6",
        "peekOfCode": "TOGGLE = 2\nprocessed = []\nwith open(\"D:/GitHub Repos/AdventOfCode/inputs/2015/day6.txt\", \"r\") as file:\n    for line in file.readlines():\n        line = line.strip()\n        line = line.replace(' through ', '), (')+')'\n        line = line.replace('turn on ', str(ON)+', (')\n        line = line.replace('turn off ', str(OFF)+', (')\n        line = line.replace('toggle ', str(TOGGLE)+', (')\n        processed.append(eval(line))",
        "detail": "2015.day6",
        "documentation": {}
    },
    {
        "label": "processed",
        "kind": 5,
        "importPath": "2015.day6",
        "description": "2015.day6",
        "peekOfCode": "processed = []\nwith open(\"D:/GitHub Repos/AdventOfCode/inputs/2015/day6.txt\", \"r\") as file:\n    for line in file.readlines():\n        line = line.strip()\n        line = line.replace(' through ', '), (')+')'\n        line = line.replace('turn on ', str(ON)+', (')\n        line = line.replace('turn off ', str(OFF)+', (')\n        line = line.replace('toggle ', str(TOGGLE)+', (')\n        processed.append(eval(line))\ngrid = {}",
        "detail": "2015.day6",
        "documentation": {}
    },
    {
        "label": "grid",
        "kind": 5,
        "importPath": "2015.day6",
        "description": "2015.day6",
        "peekOfCode": "grid = {}\nfor n in range(0, 1000):\n    for i in range(0, 1000):\n        grid[(n, i)] = 0\nfor value, start, end in processed:\n    width = end[0] - start[0]\n    height = end[1] - start[1]\n    '''\n    for w in range(0, width+1):\n        for h in range(0, height+1):",
        "detail": "2015.day6",
        "documentation": {}
    },
    {
        "label": "valid_pwd",
        "kind": 5,
        "importPath": "2019.day1",
        "description": "2019.day1",
        "peekOfCode": "valid_pwd = 0\nfor i in range(206938, 679128):\n    word = str(i)\n    prev = 0\n    valid = True\n    double = False\n    for char in word:\n        one, two, three, four, five, six = [char for char in word]\n        if one <= two <= three <= four <= five <= six:\n            valid = True",
        "detail": "2019.day1",
        "documentation": {}
    },
    {
        "label": "one",
        "kind": 2,
        "importPath": "2020.day1",
        "description": "2020.day1",
        "peekOfCode": "def one(first, second):\n    amount = int(first) + int(second)\n    if amount == 2020:\n        print(f\"{first} + {second} = {amount}\")\n        two(first, second)\ndef two(first, second):\n    print(f\"{first} * {second} = {first*second}\")\nfor item in items:\n    for item2 in items:\n        one(int(item), int(item2))",
        "detail": "2020.day1",
        "documentation": {}
    },
    {
        "label": "two",
        "kind": 2,
        "importPath": "2020.day1",
        "description": "2020.day1",
        "peekOfCode": "def two(first, second):\n    print(f\"{first} * {second} = {first*second}\")\nfor item in items:\n    for item2 in items:\n        one(int(item), int(item2))",
        "detail": "2020.day1",
        "documentation": {}
    },
    {
        "label": "items",
        "kind": 5,
        "importPath": "2020.day1",
        "description": "2020.day1",
        "peekOfCode": "items = open(\"D:/GitHub Repos/AdventOfCode/inputs/2020/day1.txt\", \"r\").read().split(\",\")\ndef one(first, second):\n    amount = int(first) + int(second)\n    if amount == 2020:\n        print(f\"{first} + {second} = {amount}\")\n        two(first, second)\ndef two(first, second):\n    print(f\"{first} * {second} = {first*second}\")\nfor item in items:\n    for item2 in items:",
        "detail": "2020.day1",
        "documentation": {}
    },
    {
        "label": "items",
        "kind": 5,
        "importPath": "2020.day2",
        "description": "2020.day2",
        "peekOfCode": "items = open(\"D:/GitHub Repos/AdventOfCode/inputs/2020/day2.txt\", \"r\").read().splitlines()\nvalid = 0\ntotal = 0\nfor line in items:\n    pwd = line.split(\" \")\n    if len(pwd) == 0:\n        pass\n    elif len(pwd) == 3:\n        amount = pwd[0].split(\"-\")\n        letter = pwd[1][0]",
        "detail": "2020.day2",
        "documentation": {}
    },
    {
        "label": "valid",
        "kind": 5,
        "importPath": "2020.day2",
        "description": "2020.day2",
        "peekOfCode": "valid = 0\ntotal = 0\nfor line in items:\n    pwd = line.split(\" \")\n    if len(pwd) == 0:\n        pass\n    elif len(pwd) == 3:\n        amount = pwd[0].split(\"-\")\n        letter = pwd[1][0]\n        word = pwd[2]",
        "detail": "2020.day2",
        "documentation": {}
    },
    {
        "label": "total",
        "kind": 5,
        "importPath": "2020.day2",
        "description": "2020.day2",
        "peekOfCode": "total = 0\nfor line in items:\n    pwd = line.split(\" \")\n    if len(pwd) == 0:\n        pass\n    elif len(pwd) == 3:\n        amount = pwd[0].split(\"-\")\n        letter = pwd[1][0]\n        word = pwd[2]\n        letters = {}",
        "detail": "2020.day2",
        "documentation": {}
    },
    {
        "label": "get_trees",
        "kind": 2,
        "importPath": "2020.day3",
        "description": "2020.day3",
        "peekOfCode": "def get_trees(dx, dy) -> int:\n    with open(\"../inputs/2020/day3.txt\") as f:\n        v = [x for x in f.read().splitlines()[::dy]]\n    trees = 0\n    x = 0\n    for y in v:\n        trees += (y[x % len(v[0])] == \"#\")\n        x += dx\n    return trees\ndef task_1():",
        "detail": "2020.day3",
        "documentation": {}
    },
    {
        "label": "task_1",
        "kind": 2,
        "importPath": "2020.day3",
        "description": "2020.day3",
        "peekOfCode": "def task_1():\n    print(get_trees(3, 1))\ndef task_2():\n    to_calc = [(1, 1), (3, 1), (5, 1), (7, 1), (1, 2)]\n    total = []\n    for tup in to_calc:\n        total.append(get_trees(tup[0], tup[1]))\n    print(math.prod(total))\ntask_1()\ntask_2()",
        "detail": "2020.day3",
        "documentation": {}
    },
    {
        "label": "task_2",
        "kind": 2,
        "importPath": "2020.day3",
        "description": "2020.day3",
        "peekOfCode": "def task_2():\n    to_calc = [(1, 1), (3, 1), (5, 1), (7, 1), (1, 2)]\n    total = []\n    for tup in to_calc:\n        total.append(get_trees(tup[0], tup[1]))\n    print(math.prod(total))\ntask_1()\ntask_2()",
        "detail": "2020.day3",
        "documentation": {}
    },
    {
        "label": "deal_with_item",
        "kind": 2,
        "importPath": "2020.day4",
        "description": "2020.day4",
        "peekOfCode": "def deal_with_item(item):\n    infos = []\n    for index, i in enumerate(item):\n        item[index] = str(i).replace(\"\\n\", \"\")\n        for part in item[index].split(\" \"):\n            infos.append(part)\n    keys = []\n    for info in infos:\n        splitted = str(info).split(\" \")\n        for part in splitted:",
        "detail": "2020.day4",
        "documentation": {}
    },
    {
        "label": "solve",
        "kind": 2,
        "importPath": "2020.day4",
        "description": "2020.day4",
        "peekOfCode": "def solve(inp):\n    inp = inp.split(\"\\n\\n\")\n    fields = [\"byr\", \"iyr\", \"eyr\", \"hgt\", \"hcl\", \"ecl\", \"pid\"]\n    def check1(entry):\n        return all(field + \":\" in entry for field in fields)\n    part1 = sum(check1(x) for x in inp)\n    def inrange(value, lo, hi):\n        return value.isnumeric() and lo <= int(value) <= hi\n    def check2(entry):\n        for f in entry.replace(\"\\n\", \" \").split():",
        "detail": "2020.day4",
        "documentation": {}
    },
    {
        "label": "passports",
        "kind": 5,
        "importPath": "2020.day4",
        "description": "2020.day4",
        "peekOfCode": "passports = open(\"../inputs/2020/day4.txt\", \"r\").read()\nfields = [\"byr\", \"iyr\", \"eyr\", \"hgt\", \"hcl\", \"ecl\", \"pid\"]\nvalid = 0\npart1 = lambda passport: all(field in passport for field in fields)\npart2 = lambda entry: entry.replace(\"\\n\", \" \").split(\" \")\ndef deal_with_item(item):\n    infos = []\n    for index, i in enumerate(item):\n        item[index] = str(i).replace(\"\\n\", \"\")\n        for part in item[index].split(\" \"):",
        "detail": "2020.day4",
        "documentation": {}
    },
    {
        "label": "fields",
        "kind": 5,
        "importPath": "2020.day4",
        "description": "2020.day4",
        "peekOfCode": "fields = [\"byr\", \"iyr\", \"eyr\", \"hgt\", \"hcl\", \"ecl\", \"pid\"]\nvalid = 0\npart1 = lambda passport: all(field in passport for field in fields)\npart2 = lambda entry: entry.replace(\"\\n\", \" \").split(\" \")\ndef deal_with_item(item):\n    infos = []\n    for index, i in enumerate(item):\n        item[index] = str(i).replace(\"\\n\", \"\")\n        for part in item[index].split(\" \"):\n            infos.append(part)",
        "detail": "2020.day4",
        "documentation": {}
    },
    {
        "label": "valid",
        "kind": 5,
        "importPath": "2020.day4",
        "description": "2020.day4",
        "peekOfCode": "valid = 0\npart1 = lambda passport: all(field in passport for field in fields)\npart2 = lambda entry: entry.replace(\"\\n\", \" \").split(\" \")\ndef deal_with_item(item):\n    infos = []\n    for index, i in enumerate(item):\n        item[index] = str(i).replace(\"\\n\", \"\")\n        for part in item[index].split(\" \"):\n            infos.append(part)\n    keys = []",
        "detail": "2020.day4",
        "documentation": {}
    },
    {
        "label": "part1",
        "kind": 5,
        "importPath": "2020.day4",
        "description": "2020.day4",
        "peekOfCode": "part1 = lambda passport: all(field in passport for field in fields)\npart2 = lambda entry: entry.replace(\"\\n\", \" \").split(\" \")\ndef deal_with_item(item):\n    infos = []\n    for index, i in enumerate(item):\n        item[index] = str(i).replace(\"\\n\", \"\")\n        for part in item[index].split(\" \"):\n            infos.append(part)\n    keys = []\n    for info in infos:",
        "detail": "2020.day4",
        "documentation": {}
    },
    {
        "label": "part2",
        "kind": 5,
        "importPath": "2020.day4",
        "description": "2020.day4",
        "peekOfCode": "part2 = lambda entry: entry.replace(\"\\n\", \" \").split(\" \")\ndef deal_with_item(item):\n    infos = []\n    for index, i in enumerate(item):\n        item[index] = str(i).replace(\"\\n\", \"\")\n        for part in item[index].split(\" \"):\n            infos.append(part)\n    keys = []\n    for info in infos:\n        splitted = str(info).split(\" \")",
        "detail": "2020.day4",
        "documentation": {}
    },
    {
        "label": "solve",
        "kind": 2,
        "importPath": "2020.day5",
        "description": "2020.day5",
        "peekOfCode": "def solve(item):\n    letters = [char for char in item]\n    rows = letters[:-3]\n    seats = list(item[-3:])\n    row = 0\n    turn = 1\n    for letter in rows:\n        if letter == \"F\":\n            row += 0\n            turn += 1",
        "detail": "2020.day5",
        "documentation": {}
    },
    {
        "label": "items",
        "kind": 5,
        "importPath": "2020.day5",
        "description": "2020.day5",
        "peekOfCode": "items = open(\"../inputs/2020/day5.txt\", \"r\").readlines()\ncalculate_seat_id = lambda row, seat: row * 8 + seat\ndef solve(item):\n    letters = [char for char in item]\n    rows = letters[:-3]\n    seats = list(item[-3:])\n    row = 0\n    turn = 1\n    for letter in rows:\n        if letter == \"F\":",
        "detail": "2020.day5",
        "documentation": {}
    },
    {
        "label": "calculate_seat_id",
        "kind": 5,
        "importPath": "2020.day5",
        "description": "2020.day5",
        "peekOfCode": "calculate_seat_id = lambda row, seat: row * 8 + seat\ndef solve(item):\n    letters = [char for char in item]\n    rows = letters[:-3]\n    seats = list(item[-3:])\n    row = 0\n    turn = 1\n    for letter in rows:\n        if letter == \"F\":\n            row += 0",
        "detail": "2020.day5",
        "documentation": {}
    },
    {
        "label": "seat_ids",
        "kind": 5,
        "importPath": "2020.day5",
        "description": "2020.day5",
        "peekOfCode": "seat_ids = []\nfor item in items:\n    item = item.replace(\"\\n\", \"\")\n    seat_ids.append(solve(item))\nsorted_ids = sorted(seat_ids)\nfor index, entry in enumerate(sorted_ids):\n    try:\n        if int(sorted_ids[index]) + 1 == int(sorted_ids[index + 1]) - 1:\n            print(sorted_ids[index] + 1)\n    except IndexError:",
        "detail": "2020.day5",
        "documentation": {}
    },
    {
        "label": "sorted_ids",
        "kind": 5,
        "importPath": "2020.day5",
        "description": "2020.day5",
        "peekOfCode": "sorted_ids = sorted(seat_ids)\nfor index, entry in enumerate(sorted_ids):\n    try:\n        if int(sorted_ids[index]) + 1 == int(sorted_ids[index + 1]) - 1:\n            print(sorted_ids[index] + 1)\n    except IndexError:\n        pass",
        "detail": "2020.day5",
        "documentation": {}
    },
    {
        "label": "items",
        "kind": 5,
        "importPath": "2021.day1",
        "description": "2021.day1",
        "peekOfCode": "items = [int(item) for item in open(\"../inputs/2021/day1.txt\", \"r\", encoding=\"UTF-8\").readlines()]\n# --- Part One ---\nprint(\" --- Part One ---\")\nprint(len([item for index, item in enumerate(items) if item > items[index - 1] and index - 1 >= 0]))\n# --- Part Two ---\nprint(\" --- Part Two ---\")\nwindows = [sum(items[index:index + 3]) for index in range(0, len(items))]\nprint(len([window for index, window in enumerate(windows) if window > windows[index -1] and index - 1 >= 0]))",
        "detail": "2021.day1",
        "documentation": {}
    },
    {
        "label": "windows",
        "kind": 5,
        "importPath": "2021.day1",
        "description": "2021.day1",
        "peekOfCode": "windows = [sum(items[index:index + 3]) for index in range(0, len(items))]\nprint(len([window for index, window in enumerate(windows) if window > windows[index -1] and index - 1 >= 0]))",
        "detail": "2021.day1",
        "documentation": {}
    },
    {
        "label": "items",
        "kind": 5,
        "importPath": "2021.day2",
        "description": "2021.day2",
        "peekOfCode": "items = [item.split(\" \") for item in open(\"../inputs/2021/day2.txt\", \"r\", encoding=\"UTF-8\").readlines()]\n# --- Part One ---\nprint(\" --- Part One ---\")\npos = 0 \ndepth = 0\nfor command in items:\n    if command[0] == \"forward\":\n        pos += int(command[1])\n    elif command[0] == \"down\":\n        depth += int(command[1])",
        "detail": "2021.day2",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "2021.day2",
        "description": "2021.day2",
        "peekOfCode": "pos = 0 \ndepth = 0\nfor command in items:\n    if command[0] == \"forward\":\n        pos += int(command[1])\n    elif command[0] == \"down\":\n        depth += int(command[1])\n    elif command[0] == \"up\":\n        depth -= int(command[1])\nprint(pos * depth)",
        "detail": "2021.day2",
        "documentation": {}
    },
    {
        "label": "depth",
        "kind": 5,
        "importPath": "2021.day2",
        "description": "2021.day2",
        "peekOfCode": "depth = 0\nfor command in items:\n    if command[0] == \"forward\":\n        pos += int(command[1])\n    elif command[0] == \"down\":\n        depth += int(command[1])\n    elif command[0] == \"up\":\n        depth -= int(command[1])\nprint(pos * depth)\n# --- Part Two ---",
        "detail": "2021.day2",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "2021.day2",
        "description": "2021.day2",
        "peekOfCode": "pos = 0 \ndepth = 0\naim = 0\nfor command in items:\n    if command[0] == \"forward\":\n        pos += int(command[1])\n        depth += aim * int(command[1])\n    elif command[0] == \"down\":\n        #depth += int(command[1])\n        aim += int(command[1])",
        "detail": "2021.day2",
        "documentation": {}
    },
    {
        "label": "depth",
        "kind": 5,
        "importPath": "2021.day2",
        "description": "2021.day2",
        "peekOfCode": "depth = 0\naim = 0\nfor command in items:\n    if command[0] == \"forward\":\n        pos += int(command[1])\n        depth += aim * int(command[1])\n    elif command[0] == \"down\":\n        #depth += int(command[1])\n        aim += int(command[1])\n    elif command[0] == \"up\":",
        "detail": "2021.day2",
        "documentation": {}
    },
    {
        "label": "aim",
        "kind": 5,
        "importPath": "2021.day2",
        "description": "2021.day2",
        "peekOfCode": "aim = 0\nfor command in items:\n    if command[0] == \"forward\":\n        pos += int(command[1])\n        depth += aim * int(command[1])\n    elif command[0] == \"down\":\n        #depth += int(command[1])\n        aim += int(command[1])\n    elif command[0] == \"up\":\n        #depth -= int(command[1])",
        "detail": "2021.day2",
        "documentation": {}
    },
    {
        "label": "items",
        "kind": 5,
        "importPath": "2021.day3",
        "description": "2021.day3",
        "peekOfCode": "items = [list(item.strip().replace(\"\\n\", \"\")) for item in open(\"../inputs/2021/day3.txt\", \"r\", encoding=\"UTF-8\").readlines()]\n# --- Part One ---\nprint(\" --- Part One ---\")\nbits = [[num[i] for num in items] for i in range(0, len(items[0]))]\ncommon_bits = [\"0\" if bit.count(\"0\") >= len(bit) // 2 else \"1\" for bit in bits]\nleast_bits = [\"0\" if bit.count(\"0\") < len(bit) // 2 else \"1\" for bit in bits]\nprint(int(\"\".join(common_bits), 2) * int(\"\".join(least_bits), 2))\n# --- Part Two ---\nprint(\" --- Part Two ---\")\n#oxygen = [[num for num in items if num[i] == common_bits[i]] for i in range(0, len(items[0]))]",
        "detail": "2021.day3",
        "documentation": {}
    },
    {
        "label": "bits",
        "kind": 5,
        "importPath": "2021.day3",
        "description": "2021.day3",
        "peekOfCode": "bits = [[num[i] for num in items] for i in range(0, len(items[0]))]\ncommon_bits = [\"0\" if bit.count(\"0\") >= len(bit) // 2 else \"1\" for bit in bits]\nleast_bits = [\"0\" if bit.count(\"0\") < len(bit) // 2 else \"1\" for bit in bits]\nprint(int(\"\".join(common_bits), 2) * int(\"\".join(least_bits), 2))\n# --- Part Two ---\nprint(\" --- Part Two ---\")\n#oxygen = [[num for num in items if num[i] == common_bits[i]] for i in range(0, len(items[0]))]\n#fitting = items\n#for i in range(0, len(items[0])):\n#    common_bits = [\"0\" if bit.count(\"0\") >= len(bit) // 2 else \"1\" for bit in fitting]",
        "detail": "2021.day3",
        "documentation": {}
    },
    {
        "label": "common_bits",
        "kind": 5,
        "importPath": "2021.day3",
        "description": "2021.day3",
        "peekOfCode": "common_bits = [\"0\" if bit.count(\"0\") >= len(bit) // 2 else \"1\" for bit in bits]\nleast_bits = [\"0\" if bit.count(\"0\") < len(bit) // 2 else \"1\" for bit in bits]\nprint(int(\"\".join(common_bits), 2) * int(\"\".join(least_bits), 2))\n# --- Part Two ---\nprint(\" --- Part Two ---\")\n#oxygen = [[num for num in items if num[i] == common_bits[i]] for i in range(0, len(items[0]))]\n#fitting = items\n#for i in range(0, len(items[0])):\n#    common_bits = [\"0\" if bit.count(\"0\") >= len(bit) // 2 else \"1\" for bit in fitting]\n#    fitting = [num for num in items if num[i] == common_bits[i]]",
        "detail": "2021.day3",
        "documentation": {}
    },
    {
        "label": "least_bits",
        "kind": 5,
        "importPath": "2021.day3",
        "description": "2021.day3",
        "peekOfCode": "least_bits = [\"0\" if bit.count(\"0\") < len(bit) // 2 else \"1\" for bit in bits]\nprint(int(\"\".join(common_bits), 2) * int(\"\".join(least_bits), 2))\n# --- Part Two ---\nprint(\" --- Part Two ---\")\n#oxygen = [[num for num in items if num[i] == common_bits[i]] for i in range(0, len(items[0]))]\n#fitting = items\n#for i in range(0, len(items[0])):\n#    common_bits = [\"0\" if bit.count(\"0\") >= len(bit) // 2 else \"1\" for bit in fitting]\n#    fitting = [num for num in items if num[i] == common_bits[i]]\n#print(len(fitting))",
        "detail": "2021.day3",
        "documentation": {}
    },
    {
        "label": "#oxygen",
        "kind": 5,
        "importPath": "2021.day3",
        "description": "2021.day3",
        "peekOfCode": "#oxygen = [[num for num in items if num[i] == common_bits[i]] for i in range(0, len(items[0]))]\n#fitting = items\n#for i in range(0, len(items[0])):\n#    common_bits = [\"0\" if bit.count(\"0\") >= len(bit) // 2 else \"1\" for bit in fitting]\n#    fitting = [num for num in items if num[i] == common_bits[i]]\n#print(len(fitting))\ntheta = \"\"\nepsilon = \"\"\nfor i in range(len(items[0])):\n    common = Counter([x[i] for x in items])",
        "detail": "2021.day3",
        "documentation": {}
    },
    {
        "label": "#fitting",
        "kind": 5,
        "importPath": "2021.day3",
        "description": "2021.day3",
        "peekOfCode": "#fitting = items\n#for i in range(0, len(items[0])):\n#    common_bits = [\"0\" if bit.count(\"0\") >= len(bit) // 2 else \"1\" for bit in fitting]\n#    fitting = [num for num in items if num[i] == common_bits[i]]\n#print(len(fitting))\ntheta = \"\"\nepsilon = \"\"\nfor i in range(len(items[0])):\n    common = Counter([x[i] for x in items])\nitems = [list(item.strip().replace(\"\\n\", \"\")) for item in open(\"../inputs/2021/day3.txt\", \"r\", encoding=\"UTF-8\").readlines()]",
        "detail": "2021.day3",
        "documentation": {}
    },
    {
        "label": "theta",
        "kind": 5,
        "importPath": "2021.day3",
        "description": "2021.day3",
        "peekOfCode": "theta = \"\"\nepsilon = \"\"\nfor i in range(len(items[0])):\n    common = Counter([x[i] for x in items])\nitems = [list(item.strip().replace(\"\\n\", \"\")) for item in open(\"../inputs/2021/day3.txt\", \"r\", encoding=\"UTF-8\").readlines()]\nfor i in range(len(items[0])):\n    common = Counter(x[i] for x in items)\n    if common[\"0\"] > common[\"1\"]:\n        items = [x for x in items if x[i] == \"1\"]\n    else:",
        "detail": "2021.day3",
        "documentation": {}
    },
    {
        "label": "epsilon",
        "kind": 5,
        "importPath": "2021.day3",
        "description": "2021.day3",
        "peekOfCode": "epsilon = \"\"\nfor i in range(len(items[0])):\n    common = Counter([x[i] for x in items])\nitems = [list(item.strip().replace(\"\\n\", \"\")) for item in open(\"../inputs/2021/day3.txt\", \"r\", encoding=\"UTF-8\").readlines()]\nfor i in range(len(items[0])):\n    common = Counter(x[i] for x in items)\n    if common[\"0\"] > common[\"1\"]:\n        items = [x for x in items if x[i] == \"1\"]\n    else:\n        items = [x for x in items if x[i] == \"0\"]",
        "detail": "2021.day3",
        "documentation": {}
    },
    {
        "label": "items",
        "kind": 5,
        "importPath": "2021.day3",
        "description": "2021.day3",
        "peekOfCode": "items = [list(item.strip().replace(\"\\n\", \"\")) for item in open(\"../inputs/2021/day3.txt\", \"r\", encoding=\"UTF-8\").readlines()]\nfor i in range(len(items[0])):\n    common = Counter(x[i] for x in items)\n    if common[\"0\"] > common[\"1\"]:\n        items = [x for x in items if x[i] == \"1\"]\n    else:\n        items = [x for x in items if x[i] == \"0\"]\n    if items:\n        epsilon = items[0]\nprint(int(theta, 2)*int(epsilon,2))",
        "detail": "2021.day3",
        "documentation": {}
    },
    {
        "label": "items",
        "kind": 5,
        "importPath": "default",
        "description": "default",
        "peekOfCode": "items = open(\"/inputs_2020.1.1.txt\", \"r\").read().splitlines()\nfor item in items:\n    pass",
        "detail": "default",
        "documentation": {}
    }
]